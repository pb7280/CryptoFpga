// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scanhash_sha256d.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scanhash_sha256d::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scanhash_sha256d::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state1 = "1";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state2 = "10";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state3 = "100";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state4 = "1000";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state5 = "10000";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state6 = "100000";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> scanhash_sha256d::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_0 = "00000000000000000000000000000000";
const int scanhash_sha256d::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_1 = "1";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_2 = "10";
const sc_lv<1> scanhash_sha256d::ap_const_lv1_0 = "0";
const sc_lv<1> scanhash_sha256d::ap_const_lv1_1 = "1";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_3 = "11";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_4 = "100";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_7 = "111";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_8 = "1000";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_9 = "1001";
const sc_lv<5> scanhash_sha256d::ap_const_lv5_0 = "00000";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_6 = "110";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_A = "1010";
const sc_lv<64> scanhash_sha256d::ap_const_lv64_13 = "10011";
const sc_lv<64> scanhash_sha256d::ap_const_lv64_7 = "111";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_0 = "0000";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_1 = "1";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_2 = "10";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_5 = "101";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_F = "1111";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_4 = "100";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_5 = "101";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_6 = "110";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_7 = "111";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_8 = "1000";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_9 = "1001";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_A = "1010";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_B = "1011";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_C = "1100";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_D = "1101";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_E = "1110";
const sc_lv<4> scanhash_sha256d::ap_const_lv4_3 = "11";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<5> scanhash_sha256d::ap_const_lv5_10 = "10000";
const sc_lv<5> scanhash_sha256d::ap_const_lv5_1 = "1";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_18 = "11000";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_1F = "11111";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_F = "1111";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_10 = "10000";
const sc_lv<32> scanhash_sha256d::ap_const_lv32_17 = "10111";
const bool scanhash_sha256d::ap_const_boolean_1 = true;

scanhash_sha256d::scanhash_sha256d(sc_module_name name) : sc_module(name), mVcdFile(0) {
    scanhash_sha256d_CTRL_BUS_s_axi_U = new scanhash_sha256d_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("scanhash_sha256d_CTRL_BUS_s_axi_U");
    scanhash_sha256d_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    scanhash_sha256d_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    scanhash_sha256d_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    scanhash_sha256d_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    scanhash_sha256d_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    scanhash_sha256d_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    scanhash_sha256d_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    scanhash_sha256d_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    scanhash_sha256d_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    scanhash_sha256d_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    scanhash_sha256d_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    scanhash_sha256d_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    scanhash_sha256d_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    scanhash_sha256d_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ap_start(ap_start);
    scanhash_sha256d_CTRL_BUS_s_axi_U->interrupt(interrupt);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ap_done(ap_done);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    scanhash_sha256d_CTRL_BUS_s_axi_U->ap_return(ap_return);
    scanhash_sha256d_CTRL_BUS_s_axi_U->work_address0(work_address0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->work_ce0(work_ce0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->work_we0(work_we0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->work_d0(n_2_fu_746_p2);
    scanhash_sha256d_CTRL_BUS_s_axi_U->work_q0(work_q0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->target_address0(target_address0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->target_ce0(target_ce0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->target_q0(target_q0);
    scanhash_sha256d_CTRL_BUS_s_axi_U->max_nonce(max_nonce);
    scanhash_sha256d_CTRL_BUS_s_axi_U->num_hashes(num_hashes);
    scanhash_sha256d_CTRL_BUS_s_axi_U->num_hashes_ap_vld(num_hashes_ap_vld);
    grp_sha256_transform_1_fu_333 = new sha256_transform_1("grp_sha256_transform_1_fu_333");
    grp_sha256_transform_1_fu_333->ap_clk(ap_clk);
    grp_sha256_transform_1_fu_333->ap_rst(ap_rst_n_inv);
    grp_sha256_transform_1_fu_333->ap_start(grp_sha256_transform_1_fu_333_ap_start);
    grp_sha256_transform_1_fu_333->ap_done(grp_sha256_transform_1_fu_333_ap_done);
    grp_sha256_transform_1_fu_333->ap_idle(grp_sha256_transform_1_fu_333_ap_idle);
    grp_sha256_transform_1_fu_333->ap_ready(grp_sha256_transform_1_fu_333_ap_ready);
    grp_sha256_transform_1_fu_333->state_0_read(midstate_0_reg_1182);
    grp_sha256_transform_1_fu_333->state_1_read(midstate_1_reg_1187);
    grp_sha256_transform_1_fu_333->state_2_read(midstate_2_reg_1192);
    grp_sha256_transform_1_fu_333->state_3_read(midstate_3_reg_1197);
    grp_sha256_transform_1_fu_333->state_4_read(midstate_4_reg_1202);
    grp_sha256_transform_1_fu_333->state_5_read(midstate_5_reg_1207);
    grp_sha256_transform_1_fu_333->state_6_read(midstate_6_reg_1212);
    grp_sha256_transform_1_fu_333->state_7_read(midstate_7_reg_1217);
    grp_sha256_transform_1_fu_333->block_0_read(data_15_fu_120);
    grp_sha256_transform_1_fu_333->block_1_read(data_15_1_fu_124);
    grp_sha256_transform_1_fu_333->block_2_read(data_15_2_fu_128);
    grp_sha256_transform_1_fu_333->block_3_read(n_2_reg_1302);
    grp_sha256_transform_1_fu_333->block_4_read(data_15_3_fu_136);
    grp_sha256_transform_1_fu_333->block_5_read(data_15_4_fu_140);
    grp_sha256_transform_1_fu_333->block_6_read(data_15_5_fu_144);
    grp_sha256_transform_1_fu_333->block_7_read(data_15_6_fu_148);
    grp_sha256_transform_1_fu_333->block_8_read(data_15_7_fu_152);
    grp_sha256_transform_1_fu_333->block_9_read(data_15_8_fu_156);
    grp_sha256_transform_1_fu_333->block_10_read(data_15_9_fu_160);
    grp_sha256_transform_1_fu_333->block_11_read(data_15_10_fu_164);
    grp_sha256_transform_1_fu_333->block_12_read(data_15_11_fu_168);
    grp_sha256_transform_1_fu_333->block_13_read(data_15_12_fu_172);
    grp_sha256_transform_1_fu_333->block_14_read(data_15_13_fu_176);
    grp_sha256_transform_1_fu_333->block_15_read(data_15_14_fu_180);
    grp_sha256_transform_1_fu_333->ap_return_0(grp_sha256_transform_1_fu_333_ap_return_0);
    grp_sha256_transform_1_fu_333->ap_return_1(grp_sha256_transform_1_fu_333_ap_return_1);
    grp_sha256_transform_1_fu_333->ap_return_2(grp_sha256_transform_1_fu_333_ap_return_2);
    grp_sha256_transform_1_fu_333->ap_return_3(grp_sha256_transform_1_fu_333_ap_return_3);
    grp_sha256_transform_1_fu_333->ap_return_4(grp_sha256_transform_1_fu_333_ap_return_4);
    grp_sha256_transform_1_fu_333->ap_return_5(grp_sha256_transform_1_fu_333_ap_return_5);
    grp_sha256_transform_1_fu_333->ap_return_6(grp_sha256_transform_1_fu_333_ap_return_6);
    grp_sha256_transform_1_fu_333->ap_return_7(grp_sha256_transform_1_fu_333_ap_return_7);
    grp_sha256_transform_fu_361 = new sha256_transform("grp_sha256_transform_fu_361");
    grp_sha256_transform_fu_361->ap_clk(ap_clk);
    grp_sha256_transform_fu_361->ap_rst(ap_rst_n_inv);
    grp_sha256_transform_fu_361->ap_start(grp_sha256_transform_fu_361_ap_start);
    grp_sha256_transform_fu_361->ap_done(grp_sha256_transform_fu_361_ap_done);
    grp_sha256_transform_fu_361->ap_idle(grp_sha256_transform_fu_361_ap_idle);
    grp_sha256_transform_fu_361->ap_ready(grp_sha256_transform_fu_361_ap_ready);
    grp_sha256_transform_fu_361->block_0_read(upper_15_9_fu_216);
    grp_sha256_transform_fu_361->block_1_read(upper_15_10_fu_220);
    grp_sha256_transform_fu_361->block_2_read(upper_15_11_fu_224);
    grp_sha256_transform_fu_361->block_3_read(upper_15_12_fu_228);
    grp_sha256_transform_fu_361->block_4_read(upper_15_13_fu_232);
    grp_sha256_transform_fu_361->block_5_read(upper_15_14_fu_236);
    grp_sha256_transform_fu_361->block_6_read(upper_15_15_fu_240);
    grp_sha256_transform_fu_361->block_7_read(upper_15_8_fu_212);
    grp_sha256_transform_fu_361->block_8_read(upper_15_7_fu_208);
    grp_sha256_transform_fu_361->block_9_read(upper_15_6_fu_204);
    grp_sha256_transform_fu_361->block_10_read(upper_15_5_fu_200);
    grp_sha256_transform_fu_361->block_11_read(upper_15_4_fu_196);
    grp_sha256_transform_fu_361->block_12_read(upper_15_3_fu_192);
    grp_sha256_transform_fu_361->block_13_read(upper_15_2_fu_188);
    grp_sha256_transform_fu_361->block_14_read(upper_15_1_fu_184);
    grp_sha256_transform_fu_361->block_15_read(upper_15_fu_132);
    grp_sha256_transform_fu_361->ap_return_0(grp_sha256_transform_fu_361_ap_return_0);
    grp_sha256_transform_fu_361->ap_return_1(grp_sha256_transform_fu_361_ap_return_1);
    grp_sha256_transform_fu_361->ap_return_2(grp_sha256_transform_fu_361_ap_return_2);
    grp_sha256_transform_fu_361->ap_return_3(grp_sha256_transform_fu_361_ap_return_3);
    grp_sha256_transform_fu_361->ap_return_4(grp_sha256_transform_fu_361_ap_return_4);
    grp_sha256_transform_fu_361->ap_return_5(grp_sha256_transform_fu_361_ap_return_5);
    grp_sha256_transform_fu_361->ap_return_6(grp_sha256_transform_fu_361_ap_return_6);
    grp_sha256_transform_fu_361->ap_return_7(grp_sha256_transform_fu_361_ap_return_7);
    grp_sha256_transform_16_fu_381 = new sha256_transform_16("grp_sha256_transform_16_fu_381");
    grp_sha256_transform_16_fu_381->ap_clk(ap_clk);
    grp_sha256_transform_16_fu_381->ap_rst(ap_rst_n_inv);
    grp_sha256_transform_16_fu_381->ap_start(grp_sha256_transform_16_fu_381_ap_start);
    grp_sha256_transform_16_fu_381->ap_done(grp_sha256_transform_16_fu_381_ap_done);
    grp_sha256_transform_16_fu_381->ap_idle(grp_sha256_transform_16_fu_381_ap_idle);
    grp_sha256_transform_16_fu_381->ap_ready(grp_sha256_transform_16_fu_381_ap_ready);
    grp_sha256_transform_16_fu_381->block_0_read(hash_0_reg_1309);
    grp_sha256_transform_16_fu_381->block_1_read(hash_1_reg_1314);
    grp_sha256_transform_16_fu_381->block_2_read(hash_2_reg_1319);
    grp_sha256_transform_16_fu_381->block_3_read(hash_3_reg_1324);
    grp_sha256_transform_16_fu_381->block_4_read(hash_4_reg_1329);
    grp_sha256_transform_16_fu_381->block_5_read(hash_5_reg_1334);
    grp_sha256_transform_16_fu_381->block_6_read(hash_6_reg_1339);
    grp_sha256_transform_16_fu_381->block_7_read(hash_7_reg_1344);
    grp_sha256_transform_16_fu_381->ap_return(grp_sha256_transform_16_fu_381_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_done );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_76_fu_846_p2 );
    sensitive << ( tmp_77_fu_851_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_phi_fu_325_p4);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_76_fu_846_p2 );
    sensitive << ( tmp_77_fu_851_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_done );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_76_fu_846_p2 );
    sensitive << ( tmp_77_fu_851_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_done );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_76_fu_846_p2 );
    sensitive << ( tmp_77_fu_851_p2 );
    sensitive << ( ap_phi_mux_p_0_phi_fu_325_p4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_399_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_301 );

    SC_METHOD(thread_grp_sha256_transform_16_fu_381_ap_start);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_start_reg );

    SC_METHOD(thread_grp_sha256_transform_1_fu_333_ap_start);
    sensitive << ( grp_sha256_transform_1_fu_333_ap_start_reg );

    SC_METHOD(thread_grp_sha256_transform_fu_361_ap_start);
    sensitive << ( grp_sha256_transform_fu_361_ap_start_reg );

    SC_METHOD(thread_high_fu_834_p5);
    sensitive << ( tmp_95_fu_800_p1 );
    sensitive << ( v_1_i_fu_814_p4 );
    sensitive << ( v_2_i_fu_824_p4 );
    sensitive << ( v_3_i_fu_804_p4 );

    SC_METHOD(thread_i_2_fu_405_p2);
    sensitive << ( i_reg_301 );

    SC_METHOD(thread_n_2_fu_746_p2);
    sensitive << ( n1_reg_313 );

    SC_METHOD(thread_n_fu_393_p2);
    sensitive << ( work_q0 );

    SC_METHOD(thread_num_hashes);
    sensitive << ( tmp_s_reg_1222 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( n_2_fu_746_p2 );

    SC_METHOD(thread_num_hashes_ap_vld);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_target_address0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_target_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_72_fu_411_p2);
    sensitive << ( i_reg_301 );

    SC_METHOD(thread_tmp_73_fu_417_p1);
    sensitive << ( tmp_72_fu_411_p2 );

    SC_METHOD(thread_tmp_74_fu_486_p1);
    sensitive << ( i_reg_301 );

    SC_METHOD(thread_tmp_76_fu_846_p2);
    sensitive << ( Htarg_reg_1065 );
    sensitive << ( grp_sha256_transform_16_fu_381_ap_done );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( high_fu_834_p5 );

    SC_METHOD(thread_tmp_77_fu_851_p2);
    sensitive << ( max_nonce_read_reg_1055 );
    sensitive << ( n_2_reg_1302 );
    sensitive << ( grp_sha256_transform_16_fu_381_ap_done );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_76_fu_846_p2 );

    SC_METHOD(thread_tmp_94_fu_490_p1);
    sensitive << ( i_reg_301 );

    SC_METHOD(thread_tmp_95_fu_800_p1);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_return );

    SC_METHOD(thread_tmp_s_fu_681_p2);
    sensitive << ( first_nonce_reg_1060 );

    SC_METHOD(thread_v_1_i_fu_814_p4);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_return );

    SC_METHOD(thread_v_2_i_fu_824_p4);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_return );

    SC_METHOD(thread_v_3_i_fu_804_p4);
    sensitive << ( grp_sha256_transform_16_fu_381_ap_return );

    SC_METHOD(thread_work_addr_reg_1045);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_work_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( work_addr_reg_1045 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_74_reg_1168 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_73_fu_417_p1 );

    SC_METHOD(thread_work_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_work_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_399_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_sha256_transform_fu_361_ap_done );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_sha256_transform_1_fu_333_ap_done );
    sensitive << ( grp_sha256_transform_16_fu_381_ap_done );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_76_fu_846_p2 );
    sensitive << ( tmp_77_fu_851_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000001";
    grp_sha256_transform_1_fu_333_ap_start_reg = SC_LOGIC_0;
    grp_sha256_transform_fu_361_ap_start_reg = SC_LOGIC_0;
    grp_sha256_transform_16_fu_381_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scanhash_sha256d_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, work_address0, "work_address0");
    sc_trace(mVcdFile, work_ce0, "work_ce0");
    sc_trace(mVcdFile, work_we0, "work_we0");
    sc_trace(mVcdFile, work_q0, "work_q0");
    sc_trace(mVcdFile, target_address0, "target_address0");
    sc_trace(mVcdFile, target_ce0, "target_ce0");
    sc_trace(mVcdFile, target_q0, "target_q0");
    sc_trace(mVcdFile, max_nonce, "max_nonce");
    sc_trace(mVcdFile, num_hashes, "num_hashes");
    sc_trace(mVcdFile, num_hashes_ap_vld, "num_hashes_ap_vld");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, work_addr_reg_1045, "work_addr_reg_1045");
    sc_trace(mVcdFile, max_nonce_read_reg_1055, "max_nonce_read_reg_1055");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, first_nonce_reg_1060, "first_nonce_reg_1060");
    sc_trace(mVcdFile, Htarg_reg_1065, "Htarg_reg_1065");
    sc_trace(mVcdFile, n_fu_393_p2, "n_fu_393_p2");
    sc_trace(mVcdFile, n_reg_1070, "n_reg_1070");
    sc_trace(mVcdFile, i_2_fu_405_p2, "i_2_fu_405_p2");
    sc_trace(mVcdFile, i_2_reg_1078, "i_2_reg_1078");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_399_p2, "exitcond_fu_399_p2");
    sc_trace(mVcdFile, tmp_74_fu_486_p1, "tmp_74_fu_486_p1");
    sc_trace(mVcdFile, tmp_74_reg_1168, "tmp_74_reg_1168");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_94_fu_490_p1, "tmp_94_fu_490_p1");
    sc_trace(mVcdFile, tmp_94_reg_1173, "tmp_94_reg_1173");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, midstate_0_reg_1182, "midstate_0_reg_1182");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_ready, "grp_sha256_transform_fu_361_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_done, "grp_sha256_transform_fu_361_ap_done");
    sc_trace(mVcdFile, midstate_1_reg_1187, "midstate_1_reg_1187");
    sc_trace(mVcdFile, midstate_2_reg_1192, "midstate_2_reg_1192");
    sc_trace(mVcdFile, midstate_3_reg_1197, "midstate_3_reg_1197");
    sc_trace(mVcdFile, midstate_4_reg_1202, "midstate_4_reg_1202");
    sc_trace(mVcdFile, midstate_5_reg_1207, "midstate_5_reg_1207");
    sc_trace(mVcdFile, midstate_6_reg_1212, "midstate_6_reg_1212");
    sc_trace(mVcdFile, midstate_7_reg_1217, "midstate_7_reg_1217");
    sc_trace(mVcdFile, tmp_s_fu_681_p2, "tmp_s_fu_681_p2");
    sc_trace(mVcdFile, tmp_s_reg_1222, "tmp_s_reg_1222");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, n_2_fu_746_p2, "n_2_fu_746_p2");
    sc_trace(mVcdFile, n_2_reg_1302, "n_2_reg_1302");
    sc_trace(mVcdFile, hash_0_reg_1309, "hash_0_reg_1309");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_ready, "grp_sha256_transform_1_fu_333_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_done, "grp_sha256_transform_1_fu_333_ap_done");
    sc_trace(mVcdFile, hash_1_reg_1314, "hash_1_reg_1314");
    sc_trace(mVcdFile, hash_2_reg_1319, "hash_2_reg_1319");
    sc_trace(mVcdFile, hash_3_reg_1324, "hash_3_reg_1324");
    sc_trace(mVcdFile, hash_4_reg_1329, "hash_4_reg_1329");
    sc_trace(mVcdFile, hash_5_reg_1334, "hash_5_reg_1334");
    sc_trace(mVcdFile, hash_6_reg_1339, "hash_6_reg_1339");
    sc_trace(mVcdFile, hash_7_reg_1344, "hash_7_reg_1344");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_start, "grp_sha256_transform_1_fu_333_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_idle, "grp_sha256_transform_1_fu_333_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_0, "grp_sha256_transform_1_fu_333_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_1, "grp_sha256_transform_1_fu_333_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_2, "grp_sha256_transform_1_fu_333_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_3, "grp_sha256_transform_1_fu_333_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_4, "grp_sha256_transform_1_fu_333_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_5, "grp_sha256_transform_1_fu_333_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_6, "grp_sha256_transform_1_fu_333_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_return_7, "grp_sha256_transform_1_fu_333_ap_return_7");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_start, "grp_sha256_transform_fu_361_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_idle, "grp_sha256_transform_fu_361_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_0, "grp_sha256_transform_fu_361_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_1, "grp_sha256_transform_fu_361_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_2, "grp_sha256_transform_fu_361_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_3, "grp_sha256_transform_fu_361_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_4, "grp_sha256_transform_fu_361_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_5, "grp_sha256_transform_fu_361_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_6, "grp_sha256_transform_fu_361_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_return_7, "grp_sha256_transform_fu_361_ap_return_7");
    sc_trace(mVcdFile, grp_sha256_transform_16_fu_381_ap_start, "grp_sha256_transform_16_fu_381_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_16_fu_381_ap_done, "grp_sha256_transform_16_fu_381_ap_done");
    sc_trace(mVcdFile, grp_sha256_transform_16_fu_381_ap_idle, "grp_sha256_transform_16_fu_381_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_16_fu_381_ap_ready, "grp_sha256_transform_16_fu_381_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_16_fu_381_ap_return, "grp_sha256_transform_16_fu_381_ap_return");
    sc_trace(mVcdFile, i_reg_301, "i_reg_301");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, n1_reg_313, "n1_reg_313");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_76_fu_846_p2, "tmp_76_fu_846_p2");
    sc_trace(mVcdFile, tmp_77_fu_851_p2, "tmp_77_fu_851_p2");
    sc_trace(mVcdFile, ap_phi_mux_p_0_phi_fu_325_p4, "ap_phi_mux_p_0_phi_fu_325_p4");
    sc_trace(mVcdFile, grp_sha256_transform_1_fu_333_ap_start_reg, "grp_sha256_transform_1_fu_333_ap_start_reg");
    sc_trace(mVcdFile, grp_sha256_transform_fu_361_ap_start_reg, "grp_sha256_transform_fu_361_ap_start_reg");
    sc_trace(mVcdFile, grp_sha256_transform_16_fu_381_ap_start_reg, "grp_sha256_transform_16_fu_381_ap_start_reg");
    sc_trace(mVcdFile, tmp_73_fu_417_p1, "tmp_73_fu_417_p1");
    sc_trace(mVcdFile, data_15_fu_120, "data_15_fu_120");
    sc_trace(mVcdFile, data_15_1_fu_124, "data_15_1_fu_124");
    sc_trace(mVcdFile, data_15_2_fu_128, "data_15_2_fu_128");
    sc_trace(mVcdFile, upper_15_fu_132, "upper_15_fu_132");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, data_15_3_fu_136, "data_15_3_fu_136");
    sc_trace(mVcdFile, data_15_4_fu_140, "data_15_4_fu_140");
    sc_trace(mVcdFile, data_15_5_fu_144, "data_15_5_fu_144");
    sc_trace(mVcdFile, data_15_6_fu_148, "data_15_6_fu_148");
    sc_trace(mVcdFile, data_15_7_fu_152, "data_15_7_fu_152");
    sc_trace(mVcdFile, data_15_8_fu_156, "data_15_8_fu_156");
    sc_trace(mVcdFile, data_15_9_fu_160, "data_15_9_fu_160");
    sc_trace(mVcdFile, data_15_10_fu_164, "data_15_10_fu_164");
    sc_trace(mVcdFile, data_15_11_fu_168, "data_15_11_fu_168");
    sc_trace(mVcdFile, data_15_12_fu_172, "data_15_12_fu_172");
    sc_trace(mVcdFile, data_15_13_fu_176, "data_15_13_fu_176");
    sc_trace(mVcdFile, data_15_14_fu_180, "data_15_14_fu_180");
    sc_trace(mVcdFile, upper_15_1_fu_184, "upper_15_1_fu_184");
    sc_trace(mVcdFile, upper_15_2_fu_188, "upper_15_2_fu_188");
    sc_trace(mVcdFile, upper_15_3_fu_192, "upper_15_3_fu_192");
    sc_trace(mVcdFile, upper_15_4_fu_196, "upper_15_4_fu_196");
    sc_trace(mVcdFile, upper_15_5_fu_200, "upper_15_5_fu_200");
    sc_trace(mVcdFile, upper_15_6_fu_204, "upper_15_6_fu_204");
    sc_trace(mVcdFile, upper_15_7_fu_208, "upper_15_7_fu_208");
    sc_trace(mVcdFile, upper_15_8_fu_212, "upper_15_8_fu_212");
    sc_trace(mVcdFile, upper_15_9_fu_216, "upper_15_9_fu_216");
    sc_trace(mVcdFile, upper_15_10_fu_220, "upper_15_10_fu_220");
    sc_trace(mVcdFile, upper_15_11_fu_224, "upper_15_11_fu_224");
    sc_trace(mVcdFile, upper_15_12_fu_228, "upper_15_12_fu_228");
    sc_trace(mVcdFile, upper_15_13_fu_232, "upper_15_13_fu_232");
    sc_trace(mVcdFile, upper_15_14_fu_236, "upper_15_14_fu_236");
    sc_trace(mVcdFile, upper_15_15_fu_240, "upper_15_15_fu_240");
    sc_trace(mVcdFile, tmp_72_fu_411_p2, "tmp_72_fu_411_p2");
    sc_trace(mVcdFile, tmp_95_fu_800_p1, "tmp_95_fu_800_p1");
    sc_trace(mVcdFile, v_1_i_fu_814_p4, "v_1_i_fu_814_p4");
    sc_trace(mVcdFile, v_2_i_fu_824_p4, "v_2_i_fu_824_p4");
    sc_trace(mVcdFile, v_3_i_fu_804_p4, "v_3_i_fu_804_p4");
    sc_trace(mVcdFile, high_fu_834_p5, "high_fu_834_p5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("scanhash_sha256d.hdltvin.dat");
    mHdltvoutHandle.open("scanhash_sha256d.hdltvout.dat");
}

scanhash_sha256d::~scanhash_sha256d() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete scanhash_sha256d_CTRL_BUS_s_axi_U;
    delete grp_sha256_transform_1_fu_333;
    delete grp_sha256_transform_fu_361;
    delete grp_sha256_transform_16_fu_381;
}

void scanhash_sha256d::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void scanhash_sha256d::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_sha256_transform_16_fu_381_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
             esl_seteq<1,1,1>(grp_sha256_transform_1_fu_333_ap_done.read(), ap_const_logic_1))) {
            grp_sha256_transform_16_fu_381_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_16_fu_381_ap_ready.read())) {
            grp_sha256_transform_16_fu_381_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_sha256_transform_1_fu_333_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            grp_sha256_transform_1_fu_333_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_1_fu_333_ap_ready.read())) {
            grp_sha256_transform_1_fu_333_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_sha256_transform_fu_361_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_399_p2.read(), ap_const_lv1_1))) {
            grp_sha256_transform_fu_361_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_361_ap_ready.read())) {
            grp_sha256_transform_fu_361_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_reg_301 = i_2_reg_1078.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_301 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(grp_sha256_transform_16_fu_381_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_76_fu_846_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_77_fu_851_p2.read()))) {
        n1_reg_313 = n_2_reg_1302.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(grp_sha256_transform_fu_361_ap_done.read(), ap_const_logic_1))) {
        n1_reg_313 = n_reg_1070.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Htarg_reg_1065 = target_q0.read();
        first_nonce_reg_1060 = work_q0.read();
        max_nonce_read_reg_1055 = max_nonce.read();
        n_reg_1070 = n_fu_393_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_B))) {
        data_15_10_fu_164 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_C))) {
        data_15_11_fu_168 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_D))) {
        data_15_12_fu_172 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_E))) {
        data_15_13_fu_176 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_F))) {
        data_15_14_fu_180 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_1))) {
        data_15_1_fu_124 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_2))) {
        data_15_2_fu_128 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_4))) {
        data_15_3_fu_136 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_5))) {
        data_15_4_fu_140 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_6))) {
        data_15_5_fu_144 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_7))) {
        data_15_6_fu_148 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_8))) {
        data_15_7_fu_152 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_9))) {
        data_15_8_fu_156 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_A))) {
        data_15_9_fu_160 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,4,4>(tmp_94_fu_490_p1.read(), ap_const_lv4_0))) {
        data_15_fu_120 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_sha256_transform_1_fu_333_ap_done.read(), ap_const_logic_1))) {
        hash_0_reg_1309 = grp_sha256_transform_1_fu_333_ap_return_0.read();
        hash_1_reg_1314 = grp_sha256_transform_1_fu_333_ap_return_1.read();
        hash_2_reg_1319 = grp_sha256_transform_1_fu_333_ap_return_2.read();
        hash_3_reg_1324 = grp_sha256_transform_1_fu_333_ap_return_3.read();
        hash_4_reg_1329 = grp_sha256_transform_1_fu_333_ap_return_4.read();
        hash_5_reg_1334 = grp_sha256_transform_1_fu_333_ap_return_5.read();
        hash_6_reg_1339 = grp_sha256_transform_1_fu_333_ap_return_6.read();
        hash_7_reg_1344 = grp_sha256_transform_1_fu_333_ap_return_7.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_2_reg_1078 = i_2_fu_405_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_sha256_transform_fu_361_ap_done.read(), ap_const_logic_1))) {
        midstate_0_reg_1182 = grp_sha256_transform_fu_361_ap_return_0.read();
        midstate_1_reg_1187 = grp_sha256_transform_fu_361_ap_return_1.read();
        midstate_2_reg_1192 = grp_sha256_transform_fu_361_ap_return_2.read();
        midstate_3_reg_1197 = grp_sha256_transform_fu_361_ap_return_3.read();
        midstate_4_reg_1202 = grp_sha256_transform_fu_361_ap_return_4.read();
        midstate_5_reg_1207 = grp_sha256_transform_fu_361_ap_return_5.read();
        midstate_6_reg_1212 = grp_sha256_transform_fu_361_ap_return_6.read();
        midstate_7_reg_1217 = grp_sha256_transform_fu_361_ap_return_7.read();
        tmp_s_reg_1222 = tmp_s_fu_681_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        n_2_reg_1302 = n_2_fu_746_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_74_reg_1168 = tmp_74_fu_486_p1.read();
        tmp_94_reg_1173 = tmp_94_fu_490_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_1))) {
        upper_15_10_fu_220 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_2))) {
        upper_15_11_fu_224 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_3))) {
        upper_15_12_fu_228 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_4))) {
        upper_15_13_fu_232 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_5))) {
        upper_15_14_fu_236 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_6))) {
        upper_15_15_fu_240 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_E))) {
        upper_15_1_fu_184 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_D))) {
        upper_15_2_fu_188 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_C))) {
        upper_15_3_fu_192 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_B))) {
        upper_15_4_fu_196 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_A))) {
        upper_15_5_fu_200 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_9))) {
        upper_15_6_fu_204 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_8))) {
        upper_15_7_fu_208 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_7))) {
        upper_15_8_fu_212 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_0))) {
        upper_15_9_fu_216 = work_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,4,4>(tmp_94_reg_1173.read(), ap_const_lv4_F))) {
        upper_15_fu_132 = work_q0.read();
    }
}

void scanhash_sha256d::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void scanhash_sha256d::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void scanhash_sha256d::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void scanhash_sha256d::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void scanhash_sha256d::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void scanhash_sha256d::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void scanhash_sha256d::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void scanhash_sha256d::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void scanhash_sha256d::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void scanhash_sha256d::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void scanhash_sha256d::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void scanhash_sha256d::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(grp_sha256_transform_16_fu_381_ap_done.read(), ap_const_logic_1) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_77_fu_851_p2.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_76_fu_846_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scanhash_sha256d::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scanhash_sha256d::thread_ap_phi_mux_p_0_phi_fu_325_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_76_fu_846_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_77_fu_851_p2.read()))) {
            ap_phi_mux_p_0_phi_fu_325_p4 = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_76_fu_846_p2.read())) {
            ap_phi_mux_p_0_phi_fu_325_p4 = ap_const_lv1_1;
        } else {
            ap_phi_mux_p_0_phi_fu_325_p4 = "X";
        }
    } else {
        ap_phi_mux_p_0_phi_fu_325_p4 = "X";
    }
}

void scanhash_sha256d::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(grp_sha256_transform_16_fu_381_ap_done.read(), ap_const_logic_1) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_77_fu_851_p2.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_76_fu_846_p2.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scanhash_sha256d::thread_ap_return() {
    ap_return = esl_zext<32,1>(ap_phi_mux_p_0_phi_fu_325_p4.read());
}

void scanhash_sha256d::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void scanhash_sha256d::thread_exitcond_fu_399_p2() {
    exitcond_fu_399_p2 = (!i_reg_301.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_301.read() == ap_const_lv5_10);
}

void scanhash_sha256d::thread_grp_sha256_transform_16_fu_381_ap_start() {
    grp_sha256_transform_16_fu_381_ap_start = grp_sha256_transform_16_fu_381_ap_start_reg.read();
}

void scanhash_sha256d::thread_grp_sha256_transform_1_fu_333_ap_start() {
    grp_sha256_transform_1_fu_333_ap_start = grp_sha256_transform_1_fu_333_ap_start_reg.read();
}

void scanhash_sha256d::thread_grp_sha256_transform_fu_361_ap_start() {
    grp_sha256_transform_fu_361_ap_start = grp_sha256_transform_fu_361_ap_start_reg.read();
}

void scanhash_sha256d::thread_high_fu_834_p5() {
    high_fu_834_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(tmp_95_fu_800_p1.read(), v_1_i_fu_814_p4.read()), v_2_i_fu_824_p4.read()), v_3_i_fu_804_p4.read());
}

void scanhash_sha256d::thread_i_2_fu_405_p2() {
    i_2_fu_405_p2 = (!i_reg_301.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_301.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void scanhash_sha256d::thread_n_2_fu_746_p2() {
    n_2_fu_746_p2 = (!ap_const_lv32_1.is_01() || !n1_reg_313.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(n1_reg_313.read()));
}

void scanhash_sha256d::thread_n_fu_393_p2() {
    n_fu_393_p2 = (!work_q0.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(work_q0.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void scanhash_sha256d::thread_num_hashes() {
    num_hashes = (!n_2_fu_746_p2.read().is_01() || !tmp_s_reg_1222.read().is_01())? sc_lv<32>(): (sc_biguint<32>(n_2_fu_746_p2.read()) + sc_biguint<32>(tmp_s_reg_1222.read()));
}

void scanhash_sha256d::thread_num_hashes_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        num_hashes_ap_vld = ap_const_logic_1;
    } else {
        num_hashes_ap_vld = ap_const_logic_0;
    }
}

void scanhash_sha256d::thread_target_address0() {
    target_address0 =  (sc_lv<3>) (ap_const_lv64_7);
}

void scanhash_sha256d::thread_target_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        target_ce0 = ap_const_logic_1;
    } else {
        target_ce0 = ap_const_logic_0;
    }
}

void scanhash_sha256d::thread_tmp_72_fu_411_p2() {
    tmp_72_fu_411_p2 = (i_reg_301.read() ^ ap_const_lv5_10);
}

void scanhash_sha256d::thread_tmp_73_fu_417_p1() {
    tmp_73_fu_417_p1 = esl_zext<64,5>(tmp_72_fu_411_p2.read());
}

void scanhash_sha256d::thread_tmp_74_fu_486_p1() {
    tmp_74_fu_486_p1 = esl_zext<64,5>(i_reg_301.read());
}

void scanhash_sha256d::thread_tmp_76_fu_846_p2() {
    tmp_76_fu_846_p2 = (!high_fu_834_p5.read().is_01() || !Htarg_reg_1065.read().is_01())? sc_lv<1>(): (sc_biguint<32>(high_fu_834_p5.read()) > sc_biguint<32>(Htarg_reg_1065.read()));
}

void scanhash_sha256d::thread_tmp_77_fu_851_p2() {
    tmp_77_fu_851_p2 = (!n_2_reg_1302.read().is_01() || !max_nonce_read_reg_1055.read().is_01())? sc_lv<1>(): (sc_biguint<32>(n_2_reg_1302.read()) < sc_biguint<32>(max_nonce_read_reg_1055.read()));
}

void scanhash_sha256d::thread_tmp_94_fu_490_p1() {
    tmp_94_fu_490_p1 = i_reg_301.read().range(4-1, 0);
}

void scanhash_sha256d::thread_tmp_95_fu_800_p1() {
    tmp_95_fu_800_p1 = grp_sha256_transform_16_fu_381_ap_return.read().range(8-1, 0);
}

void scanhash_sha256d::thread_tmp_s_fu_681_p2() {
    tmp_s_fu_681_p2 = (!ap_const_lv32_1.is_01() || !first_nonce_reg_1060.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) - sc_biguint<32>(first_nonce_reg_1060.read()));
}

void scanhash_sha256d::thread_v_1_i_fu_814_p4() {
    v_1_i_fu_814_p4 = grp_sha256_transform_16_fu_381_ap_return.read().range(15, 8);
}

void scanhash_sha256d::thread_v_2_i_fu_824_p4() {
    v_2_i_fu_824_p4 = grp_sha256_transform_16_fu_381_ap_return.read().range(23, 16);
}

void scanhash_sha256d::thread_v_3_i_fu_804_p4() {
    v_3_i_fu_804_p4 = grp_sha256_transform_16_fu_381_ap_return.read().range(31, 24);
}

void scanhash_sha256d::thread_work_addr_reg_1045() {
    work_addr_reg_1045 =  (sc_lv<5>) (ap_const_lv64_13);
}

void scanhash_sha256d::thread_work_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        work_address0 = work_addr_reg_1045.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        work_address0 =  (sc_lv<5>) (tmp_74_reg_1168.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        work_address0 =  (sc_lv<5>) (tmp_73_fu_417_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        work_address0 =  (sc_lv<5>) (ap_const_lv64_13);
    } else {
        work_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void scanhash_sha256d::thread_work_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        work_ce0 = ap_const_logic_1;
    } else {
        work_ce0 = ap_const_logic_0;
    }
}

void scanhash_sha256d::thread_work_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        work_we0 = ap_const_logic_1;
    } else {
        work_we0 = ap_const_logic_0;
    }
}

void scanhash_sha256d::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_399_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_sha256_transform_fu_361_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_sha256_transform_1_fu_333_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(grp_sha256_transform_16_fu_381_ap_done.read(), ap_const_logic_1) && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_77_fu_851_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_76_fu_846_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(grp_sha256_transform_16_fu_381_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_76_fu_846_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_77_fu_851_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

void scanhash_sha256d::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


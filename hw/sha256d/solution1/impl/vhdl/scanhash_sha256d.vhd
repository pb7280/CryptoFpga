-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scanhash_sha256d is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of scanhash_sha256d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scanhash_sha256d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.013000,HLS_SYN_LAT=610919703,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=9959,HLS_SYN_LUT=8639,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal work_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal work_ce0 : STD_LOGIC;
    signal work_we0 : STD_LOGIC;
    signal work_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal target_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal target_ce0 : STD_LOGIC;
    signal target_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_nonce : STD_LOGIC_VECTOR (31 downto 0);
    signal num_hashes : STD_LOGIC_VECTOR (31 downto 0);
    signal num_hashes_ap_vld : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal work_addr_reg_1045 : STD_LOGIC_VECTOR (4 downto 0);
    signal max_nonce_read_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal first_nonce_reg_1060 : STD_LOGIC_VECTOR (31 downto 0);
    signal Htarg_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_405_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1078 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_reg_1168 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_94_fu_490_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_94_reg_1173 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal midstate_0_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_sha256_transform_fu_361_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_361_ap_done : STD_LOGIC;
    signal midstate_1_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal midstate_2_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal midstate_3_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal midstate_4_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal midstate_5_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal midstate_6_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal midstate_7_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal n_2_fu_746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_0_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_sha256_transform_1_fu_333_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_1_fu_333_ap_done : STD_LOGIC;
    signal hash_1_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_2_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_3_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_4_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_5_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_6_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_7_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_start : STD_LOGIC;
    signal grp_sha256_transform_1_fu_333_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_1_fu_333_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_361_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_361_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_361_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_16_fu_381_ap_start : STD_LOGIC;
    signal grp_sha256_transform_16_fu_381_ap_done : STD_LOGIC;
    signal grp_sha256_transform_16_fu_381_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_16_fu_381_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_16_fu_381_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_301 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n1_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_76_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_0_phi_fu_325_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_transform_1_fu_333_ap_start_reg : STD_LOGIC := '0';
    signal grp_sha256_transform_fu_361_ap_start_reg : STD_LOGIC := '0';
    signal grp_sha256_transform_16_fu_381_ap_start_reg : STD_LOGIC := '0';
    signal tmp_73_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_15_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_1_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_2_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal data_15_3_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_4_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_5_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_6_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_7_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_8_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_9_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_10_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_11_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_12_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_13_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_15_14_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_1_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_2_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_3_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_4_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_5_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_6_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_7_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_8_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_9_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_10_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_11_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_12_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_13_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_14_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_15_15_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_95_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_1_i_fu_814_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_2_i_fu_824_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_3_i_fu_804_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_fu_834_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component sha256_transform_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        block_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_transform_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        block_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        block_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scanhash_sha256d_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        work_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        work_ce0 : IN STD_LOGIC;
        work_we0 : IN STD_LOGIC;
        work_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        work_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        target_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        target_ce0 : IN STD_LOGIC;
        target_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_nonce : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_hashes : IN STD_LOGIC_VECTOR (31 downto 0);
        num_hashes_ap_vld : IN STD_LOGIC );
    end component;



begin
    scanhash_sha256d_CTRL_BUS_s_axi_U : component scanhash_sha256d_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        work_address0 => work_address0,
        work_ce0 => work_ce0,
        work_we0 => work_we0,
        work_d0 => n_2_fu_746_p2,
        work_q0 => work_q0,
        target_address0 => target_address0,
        target_ce0 => target_ce0,
        target_q0 => target_q0,
        max_nonce => max_nonce,
        num_hashes => num_hashes,
        num_hashes_ap_vld => num_hashes_ap_vld);

    grp_sha256_transform_1_fu_333 : component sha256_transform_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_transform_1_fu_333_ap_start,
        ap_done => grp_sha256_transform_1_fu_333_ap_done,
        ap_idle => grp_sha256_transform_1_fu_333_ap_idle,
        ap_ready => grp_sha256_transform_1_fu_333_ap_ready,
        state_0_read => midstate_0_reg_1182,
        state_1_read => midstate_1_reg_1187,
        state_2_read => midstate_2_reg_1192,
        state_3_read => midstate_3_reg_1197,
        state_4_read => midstate_4_reg_1202,
        state_5_read => midstate_5_reg_1207,
        state_6_read => midstate_6_reg_1212,
        state_7_read => midstate_7_reg_1217,
        block_0_read => data_15_fu_120,
        block_1_read => data_15_1_fu_124,
        block_2_read => data_15_2_fu_128,
        block_3_read => n_2_reg_1302,
        block_4_read => data_15_3_fu_136,
        block_5_read => data_15_4_fu_140,
        block_6_read => data_15_5_fu_144,
        block_7_read => data_15_6_fu_148,
        block_8_read => data_15_7_fu_152,
        block_9_read => data_15_8_fu_156,
        block_10_read => data_15_9_fu_160,
        block_11_read => data_15_10_fu_164,
        block_12_read => data_15_11_fu_168,
        block_13_read => data_15_12_fu_172,
        block_14_read => data_15_13_fu_176,
        block_15_read => data_15_14_fu_180,
        ap_return_0 => grp_sha256_transform_1_fu_333_ap_return_0,
        ap_return_1 => grp_sha256_transform_1_fu_333_ap_return_1,
        ap_return_2 => grp_sha256_transform_1_fu_333_ap_return_2,
        ap_return_3 => grp_sha256_transform_1_fu_333_ap_return_3,
        ap_return_4 => grp_sha256_transform_1_fu_333_ap_return_4,
        ap_return_5 => grp_sha256_transform_1_fu_333_ap_return_5,
        ap_return_6 => grp_sha256_transform_1_fu_333_ap_return_6,
        ap_return_7 => grp_sha256_transform_1_fu_333_ap_return_7);

    grp_sha256_transform_fu_361 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_transform_fu_361_ap_start,
        ap_done => grp_sha256_transform_fu_361_ap_done,
        ap_idle => grp_sha256_transform_fu_361_ap_idle,
        ap_ready => grp_sha256_transform_fu_361_ap_ready,
        block_0_read => upper_15_9_fu_216,
        block_1_read => upper_15_10_fu_220,
        block_2_read => upper_15_11_fu_224,
        block_3_read => upper_15_12_fu_228,
        block_4_read => upper_15_13_fu_232,
        block_5_read => upper_15_14_fu_236,
        block_6_read => upper_15_15_fu_240,
        block_7_read => upper_15_8_fu_212,
        block_8_read => upper_15_7_fu_208,
        block_9_read => upper_15_6_fu_204,
        block_10_read => upper_15_5_fu_200,
        block_11_read => upper_15_4_fu_196,
        block_12_read => upper_15_3_fu_192,
        block_13_read => upper_15_2_fu_188,
        block_14_read => upper_15_1_fu_184,
        block_15_read => upper_15_fu_132,
        ap_return_0 => grp_sha256_transform_fu_361_ap_return_0,
        ap_return_1 => grp_sha256_transform_fu_361_ap_return_1,
        ap_return_2 => grp_sha256_transform_fu_361_ap_return_2,
        ap_return_3 => grp_sha256_transform_fu_361_ap_return_3,
        ap_return_4 => grp_sha256_transform_fu_361_ap_return_4,
        ap_return_5 => grp_sha256_transform_fu_361_ap_return_5,
        ap_return_6 => grp_sha256_transform_fu_361_ap_return_6,
        ap_return_7 => grp_sha256_transform_fu_361_ap_return_7);

    grp_sha256_transform_16_fu_381 : component sha256_transform_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_transform_16_fu_381_ap_start,
        ap_done => grp_sha256_transform_16_fu_381_ap_done,
        ap_idle => grp_sha256_transform_16_fu_381_ap_idle,
        ap_ready => grp_sha256_transform_16_fu_381_ap_ready,
        block_0_read => hash_0_reg_1309,
        block_1_read => hash_1_reg_1314,
        block_2_read => hash_2_reg_1319,
        block_3_read => hash_3_reg_1324,
        block_4_read => hash_4_reg_1329,
        block_5_read => hash_5_reg_1334,
        block_6_read => hash_6_reg_1339,
        block_7_read => hash_7_reg_1344,
        ap_return => grp_sha256_transform_16_fu_381_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_transform_16_fu_381_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_transform_16_fu_381_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_sha256_transform_1_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_sha256_transform_16_fu_381_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_transform_16_fu_381_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_transform_16_fu_381_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_transform_1_fu_333_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_transform_1_fu_333_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_sha256_transform_1_fu_333_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_transform_1_fu_333_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_transform_1_fu_333_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_transform_fu_361_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_transform_fu_361_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_399_p2 = ap_const_lv1_1))) then 
                    grp_sha256_transform_fu_361_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_transform_fu_361_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_transform_fu_361_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_301 <= i_2_reg_1078;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_301 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    n1_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha256_transform_16_fu_381_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_77_fu_851_p2 = ap_const_lv1_1) and (tmp_76_fu_846_p2 = ap_const_lv1_1))) then 
                n1_reg_313 <= n_2_reg_1302;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sha256_transform_fu_361_ap_done = ap_const_logic_1))) then 
                n1_reg_313 <= n_reg_1070;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Htarg_reg_1065 <= target_q0;
                first_nonce_reg_1060 <= work_q0;
                max_nonce_read_reg_1055 <= max_nonce;
                n_reg_1070 <= n_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_B))) then
                data_15_10_fu_164 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_C))) then
                data_15_11_fu_168 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_D))) then
                data_15_12_fu_172 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_E))) then
                data_15_13_fu_176 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_F))) then
                data_15_14_fu_180 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_1))) then
                data_15_1_fu_124 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_2))) then
                data_15_2_fu_128 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_4))) then
                data_15_3_fu_136 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_5))) then
                data_15_4_fu_140 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_6))) then
                data_15_5_fu_144 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_7))) then
                data_15_6_fu_148 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_8))) then
                data_15_7_fu_152 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_9))) then
                data_15_8_fu_156 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_A))) then
                data_15_9_fu_160 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_94_fu_490_p1 = ap_const_lv4_0))) then
                data_15_fu_120 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha256_transform_1_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                hash_0_reg_1309 <= grp_sha256_transform_1_fu_333_ap_return_0;
                hash_1_reg_1314 <= grp_sha256_transform_1_fu_333_ap_return_1;
                hash_2_reg_1319 <= grp_sha256_transform_1_fu_333_ap_return_2;
                hash_3_reg_1324 <= grp_sha256_transform_1_fu_333_ap_return_3;
                hash_4_reg_1329 <= grp_sha256_transform_1_fu_333_ap_return_4;
                hash_5_reg_1334 <= grp_sha256_transform_1_fu_333_ap_return_5;
                hash_6_reg_1339 <= grp_sha256_transform_1_fu_333_ap_return_6;
                hash_7_reg_1344 <= grp_sha256_transform_1_fu_333_ap_return_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_2_reg_1078 <= i_2_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sha256_transform_fu_361_ap_done = ap_const_logic_1))) then
                midstate_0_reg_1182 <= grp_sha256_transform_fu_361_ap_return_0;
                midstate_1_reg_1187 <= grp_sha256_transform_fu_361_ap_return_1;
                midstate_2_reg_1192 <= grp_sha256_transform_fu_361_ap_return_2;
                midstate_3_reg_1197 <= grp_sha256_transform_fu_361_ap_return_3;
                midstate_4_reg_1202 <= grp_sha256_transform_fu_361_ap_return_4;
                midstate_5_reg_1207 <= grp_sha256_transform_fu_361_ap_return_5;
                midstate_6_reg_1212 <= grp_sha256_transform_fu_361_ap_return_6;
                midstate_7_reg_1217 <= grp_sha256_transform_fu_361_ap_return_7;
                tmp_s_reg_1222 <= tmp_s_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                n_2_reg_1302 <= n_2_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_74_reg_1168(4 downto 0) <= tmp_74_fu_486_p1(4 downto 0);
                tmp_94_reg_1173 <= tmp_94_fu_490_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_1))) then
                upper_15_10_fu_220 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_2))) then
                upper_15_11_fu_224 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_3))) then
                upper_15_12_fu_228 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_4))) then
                upper_15_13_fu_232 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_5))) then
                upper_15_14_fu_236 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_6))) then
                upper_15_15_fu_240 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_E))) then
                upper_15_1_fu_184 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_D))) then
                upper_15_2_fu_188 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_C))) then
                upper_15_3_fu_192 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_B))) then
                upper_15_4_fu_196 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_A))) then
                upper_15_5_fu_200 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_9))) then
                upper_15_6_fu_204 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_8))) then
                upper_15_7_fu_208 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_7))) then
                upper_15_8_fu_212 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_0))) then
                upper_15_9_fu_216 <= work_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_94_reg_1173 = ap_const_lv4_F))) then
                upper_15_fu_132 <= work_q0;
            end if;
        end if;
    end process;
    tmp_74_reg_1168(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_399_p2, ap_CS_fsm_state8, grp_sha256_transform_fu_361_ap_done, ap_CS_fsm_state10, grp_sha256_transform_1_fu_333_ap_done, grp_sha256_transform_16_fu_381_ap_done, ap_CS_fsm_state11, tmp_76_fu_846_p2, tmp_77_fu_851_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_399_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sha256_transform_fu_361_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_sha256_transform_1_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_sha256_transform_16_fu_381_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((tmp_77_fu_851_p2 = ap_const_lv1_0) or (tmp_76_fu_846_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((grp_sha256_transform_16_fu_381_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_77_fu_851_p2 = ap_const_lv1_1) and (tmp_76_fu_846_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_sha256_transform_16_fu_381_ap_done, ap_CS_fsm_state11, tmp_76_fu_846_p2, tmp_77_fu_851_p2)
    begin
        if (((grp_sha256_transform_16_fu_381_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((tmp_77_fu_851_p2 = ap_const_lv1_0) or (tmp_76_fu_846_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_325_p4_assign_proc : process(ap_CS_fsm_state11, tmp_76_fu_846_p2, tmp_77_fu_851_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
            if (((tmp_76_fu_846_p2 = ap_const_lv1_1) and (tmp_77_fu_851_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_p_0_phi_fu_325_p4 <= ap_const_lv1_0;
            elsif ((tmp_76_fu_846_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_0_phi_fu_325_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_p_0_phi_fu_325_p4 <= "X";
            end if;
        else 
            ap_phi_mux_p_0_phi_fu_325_p4 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha256_transform_16_fu_381_ap_done, ap_CS_fsm_state11, tmp_76_fu_846_p2, tmp_77_fu_851_p2)
    begin
        if (((grp_sha256_transform_16_fu_381_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((tmp_77_fu_851_p2 = ap_const_lv1_0) or (tmp_76_fu_846_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_phi_fu_325_p4),32));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_399_p2 <= "1" when (i_reg_301 = ap_const_lv5_10) else "0";
    grp_sha256_transform_16_fu_381_ap_start <= grp_sha256_transform_16_fu_381_ap_start_reg;
    grp_sha256_transform_1_fu_333_ap_start <= grp_sha256_transform_1_fu_333_ap_start_reg;
    grp_sha256_transform_fu_361_ap_start <= grp_sha256_transform_fu_361_ap_start_reg;
    high_fu_834_p5 <= (((tmp_95_fu_800_p1 & v_1_i_fu_814_p4) & v_2_i_fu_824_p4) & v_3_i_fu_804_p4);
    i_2_fu_405_p2 <= std_logic_vector(unsigned(i_reg_301) + unsigned(ap_const_lv5_1));
    n_2_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(n1_reg_313));
    n_fu_393_p2 <= std_logic_vector(unsigned(work_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    num_hashes <= std_logic_vector(unsigned(n_2_fu_746_p2) + unsigned(tmp_s_reg_1222));

    num_hashes_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            num_hashes_ap_vld <= ap_const_logic_1;
        else 
            num_hashes_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    target_address0 <= ap_const_lv64_7(3 - 1 downto 0);

    target_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            target_ce0 <= ap_const_logic_1;
        else 
            target_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_72_fu_411_p2 <= (i_reg_301 xor ap_const_lv5_10);
    tmp_73_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_411_p2),64));
    tmp_74_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_301),64));
    tmp_76_fu_846_p2 <= "1" when (unsigned(high_fu_834_p5) > unsigned(Htarg_reg_1065)) else "0";
    tmp_77_fu_851_p2 <= "1" when (unsigned(n_2_reg_1302) < unsigned(max_nonce_read_reg_1055)) else "0";
    tmp_94_fu_490_p1 <= i_reg_301(4 - 1 downto 0);
    tmp_95_fu_800_p1 <= grp_sha256_transform_16_fu_381_ap_return(8 - 1 downto 0);
    tmp_s_fu_681_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(first_nonce_reg_1060));
    v_1_i_fu_814_p4 <= grp_sha256_transform_16_fu_381_ap_return(15 downto 8);
    v_2_i_fu_824_p4 <= grp_sha256_transform_16_fu_381_ap_return(23 downto 16);
    v_3_i_fu_804_p4 <= grp_sha256_transform_16_fu_381_ap_return(31 downto 24);
    work_addr_reg_1045 <= ap_const_lv64_13(5 - 1 downto 0);

    work_address0_assign_proc : process(ap_CS_fsm_state1, work_addr_reg_1045, ap_CS_fsm_state3, tmp_74_reg_1168, ap_CS_fsm_state5, ap_CS_fsm_state9, tmp_73_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            work_address0 <= work_addr_reg_1045;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            work_address0 <= tmp_74_reg_1168(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            work_address0 <= tmp_73_fu_417_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            work_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        else 
            work_address0 <= "XXXXX";
        end if; 
    end process;


    work_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            work_ce0 <= ap_const_logic_1;
        else 
            work_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    work_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            work_we0 <= ap_const_logic_1;
        else 
            work_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
